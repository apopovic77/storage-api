name: Deploy Storage API

on:
  push:
    branches:
      - dev          # Auto-deploy to staging (arkturian.com)
      - main         # Manual deploy to production
  pull_request:
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        run: |
          if [ -d tests ]; then
            pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
          else
            echo "No tests directory present. Skipping pytest step."
          fi

  deploy-staging:
    name: Deploy to Staging (arkturian.com)
    needs: test
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push' && vars.ENABLE_STAGING_DEPLOY == 'true'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://api-storage.arkturian.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "ðŸš€ Deploying to staging..."
            TARGET_DIR="/var/www/api-storage.arkturian.com"
            if [ -d /var/www/api-storage ]; then
              TARGET_DIR="/var/www/api-storage"
            fi
            cd "$TARGET_DIR"
            git config --global --add safe.directory "$TARGET_DIR"
            if [ ! -d .git ]; then
              git init
            fi
            git remote set-url origin https://github.com/apopovic77/storage-api.git 2>/dev/null || git remote add origin https://github.com/apopovic77/storage-api.git
            git fetch origin
            TMP_BACKUP=$(mktemp -d)
            for item in .env storage.db storage.db-shm storage.db-wal chroma_db; do
              if [ -e "$item" ]; then
                mkdir -p "$TMP_BACKUP/$(dirname "$item")"
                cp -a "$item" "$TMP_BACKUP/$item"
              fi
            done
            git clean -fdx
            for item in .env storage.db storage.db-shm storage.db-wal chroma_db; do
              if [ -e "$TMP_BACKUP/$item" ]; then
                mkdir -p "$(dirname "$item")"
                cp -a "$TMP_BACKUP/$item" "$item"
              fi
            done
            rm -rf "$TMP_BACKUP"
            git checkout dev
            git reset --hard origin/dev
            /root/.pyenv/versions/3.11.9/bin/pip install -r requirements.txt
            systemctl restart storage-api.service
            sleep 5
            systemctl status storage-api.service --no-pager

      - name: Health Check
        run: |
          sleep 10
          curl -f https://api-storage.arkturian.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && vars.ENABLE_PRODUCTION_DEPLOY == 'true'
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Production Servers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "ðŸš€ Deploying to production..."
            TARGET_DIR="/var/www/api-storage"
            if [ ! -d "$TARGET_DIR" ] && [ -d /var/www/api-storage.arkturian.com ]; then
              TARGET_DIR="/var/www/api-storage.arkturian.com"
            fi
            cd "$TARGET_DIR"
            git config --global --add safe.directory "$TARGET_DIR"
            if [ ! -d .git ]; then
              git init
            fi
            git remote set-url origin https://github.com/apopovic77/storage-api.git 2>/dev/null || git remote add origin https://github.com/apopovic77/storage-api.git
            git fetch origin
            TMP_BACKUP=$(mktemp -d)
            for item in .env storage.db storage.db-shm storage.db-wal chroma_db; do
              if [ -e "$item" ]; then
                mkdir -p "$TMP_BACKUP/$(dirname "$item")"
                cp -a "$item" "$TMP_BACKUP/$item"
              fi
            done
            git clean -fdx
            for item in .env storage.db storage.db-shm storage.db-wal chroma_db; do
              if [ -e "$TMP_BACKUP/$item" ]; then
                mkdir -p "$(dirname "$item")"
                cp -a "$TMP_BACKUP/$item" "$item"
              fi
            done
            rm -rf "$TMP_BACKUP"
            git checkout main
            git reset --hard origin/main
            /root/.pyenv/versions/3.11.9/bin/pip install -r requirements.txt
            systemctl restart storage-api.service
            sleep 5
            systemctl status storage-api.service --no-pager
