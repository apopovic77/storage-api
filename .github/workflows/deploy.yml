name: Build & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build application
        run: echo 'No build needed for FastAPI'

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e

            REPO_URL="https://github.com/apopovic77/storage-api.git"
            REPO_PATH="/opt/repos/storage-api"
            DEPLOY_PATH="/var/www/api-storage.arkturian.com"
            BACKUP_DIR="/var/backups"
            BACKUP_PREFIX="storage-api"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BACKUP_PATH="$BACKUP_DIR/${BACKUP_PREFIX}-${TIMESTAMP}"

            # Clone or update repo
            if [ ! -d "$REPO_PATH" ]; then
              echo "Cloning repository..."
              mkdir -p /opt/repos
              git clone "$REPO_URL" "$REPO_PATH"
            fi

            cd "$REPO_PATH"
            git fetch origin main
            git reset --hard origin/main

            # Create backup
            if [ -d "$DEPLOY_PATH" ]; then
              echo "Creating backup..."
              mkdir -p "$BACKUP_DIR"
              cp -r "$DEPLOY_PATH" "$BACKUP_PATH"
              echo "Backup saved to: $BACKUP_PATH"
            fi

            # Deploy
            echo "Deploying FastAPI application..."
            mkdir -p "$DEPLOY_PATH"
            rsync -av --delete \
              --exclude='.git' \
              --exclude='__pycache__' \
              --exclude='*.pyc' \
              --exclude='.env' \
              --exclude='venv' \
              --exclude='storage.db' \
              --exclude='chroma_db' \
              "$REPO_PATH/" "$DEPLOY_PATH/"

            # Install dependencies in deployment directory
            cd "$DEPLOY_PATH"
            /root/.pyenv/versions/3.11.9/bin/pip install -r requirements.txt

            # Set permissions
            chown -R www-data:www-data "$DEPLOY_PATH"
            chmod -R 755 "$DEPLOY_PATH"

            # Database Backup (IMPORTANT: DB is in DEPLOY_PATH, NOT /var/lib!)
            DB_PATH="$DEPLOY_PATH/storage.db"
            DB_BACKUP="/var/backups/storage-db-${TIMESTAMP}.db"

            if [ -f "$DB_PATH" ]; then
              echo "üì¶ Backing up database..."
              cp "$DB_PATH" "$DB_BACKUP"
              echo "‚úÖ Database backed up to: $DB_BACKUP"
            fi

            # Run Alembic migrations (if alembic directory exists)
            if [ -d "alembic" ]; then
              echo "üîÑ Running database migrations..."
              /root/.pyenv/versions/3.11.9/bin/alembic upgrade head || {
                echo "‚ùå Migration failed! Restoring backup..."
                cp "$DB_BACKUP" "$DB_PATH"
                exit 1
              }
              echo "‚úÖ Migrations completed successfully"
            else
              echo "‚ö†Ô∏è  No alembic migrations found (skipping)"
            fi

            # Restart service
            echo "Restarting storage-api service..."
            systemctl restart storage-api

            echo "‚úÖ Deployment completed successfully!"
            systemctl status storage-api --no-pager -l

      - name: Notify on success
        if: success()
        run: echo "‚úÖ Deployment successful for commit ${{ github.sha }}"

      - name: Notify on failure
        if: failure()
        run: echo "‚ùå Deployment failed for commit ${{ github.sha }}"

  trigger-sdk-regeneration:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Trigger TypeScript SDK regeneration
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: apopovic77/storage-api-typescript-sdk
          event-type: openapi-updated

      - name: Trigger C# SDK regeneration
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: apopovic77/storage-api-csharp-sdk
          event-type: openapi-updated

  trigger-e2e-tests:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Trigger E2E tests
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: apopovic77/api-e2e-tests
          event-type: storage-api-deployed
          client-payload: '{"api": "storage", "sha": "${{ github.sha }}"}'
